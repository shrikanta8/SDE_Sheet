//https://leetcode.com/problems/coin-change/

class Solution {
public:
    int func(vector<int>& coins, int T, int ind, vector<vector<int> >& dp){
        
        if(ind==0){
            if(T%coins[0] == 0)
                // return T/coins[0];
                return dp[ind][T] = T/coins[0];  //
            else
                return 1e9;
        }
        
        if(T==0) return 0;
        if(dp[ind][T] != -1) 
            return dp[ind][T];
        //not take
        
        int take = 1e9;
        
        int notTake = func(coins,T,ind-1, dp);
        if(coins[ind] <= T){
            take = 1+func(coins,T-coins[ind],ind, dp);
        }
        return dp[ind][T]= min(take,notTake);
        
    }
    int coinChange(vector<int>& coins, int amount) {
        vector<vector<int> > dp(coins.size() ,vector<int>(amount+1,-1));
        int ans=func(coins,amount,coins.size()-1,dp);
        
        if(ans>=1000000000)
            return -1;
                
        return ans;
    }
    
    
    
};
