//https://leetcode.com/problems/search-a-2d-matrix/

//using pointers

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        //starting from top right
        
        int r = matrix.size(),c= matrix[0].size(),i=0,j=c-1;
        while(i<r && j>=0){
            if(matrix[i][j] == target) return true;
            if(matrix[i][j] > target) 
                j--;
            else
                i++;
        }
        return false;
    }
};
Time complexity: O(m+n)

Space complexity: O(1)




//binary search

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int lo = 0;
        if(!matrix.size()) return false;
        int hi = (matrix.size() * matrix[0].size()) - 1;
        
        while(lo <= hi) {
            int mid = (lo + (hi - lo) / 2);
            if(matrix[mid/matrix[0].size()][mid % matrix[0].size()] == target) {
                return true;
            }
            if(matrix[mid/matrix[0].size()][mid % matrix[0].size()] < target) {
                lo = mid + 1;
            }
            else {
                hi = mid - 1;
            }
        }
        return false;
    }



Time complexity: O(log(m*n))

Space complexity: O(1)

