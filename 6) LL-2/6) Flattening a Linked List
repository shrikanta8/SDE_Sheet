//https://practice.geeksforgeeks.org/problems/flattening-a-linked-list/1#


/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
    
//merging two list's
Node* mergeList(Node *r1,Node *r2){
    Node *head= new Node(0);
    Node* temp=head;
   
    while(r1 && r2){
        if(r1->data <= r2->data){
            temp->bottom = r1;
            r1=r1->bottom;
            temp= temp->bottom;
        }
        else{
            temp->bottom = r2;
            r2=r2->bottom;
            temp= temp->bottom;
        }
    }
    if(r1){
        temp->bottom =r1;
    }
    if(r2){
        temp->bottom =r2;
    }
    return head->bottom;
}
Node *flatten(Node *root)
{
    //if last node is there then also return
    if(!root || !root->next) 
        return root;
    
    //new modified list will be root's next
    root->next = flatten(root->next);
    
    //merging root and root's next and assigning new node's value to root
    root = mergeList(root,root->next);
    return root;
   // Your code here
}



Time Complexity: O(N), where N is the total number of nodes present

Reason: We are visiting all the nodes present in the given list.

Space Complexity: O(1)
