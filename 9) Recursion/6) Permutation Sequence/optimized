
//https://leetcode.com/problems/permutation-sequence/

class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int> num;
        int fact=1;
        for(int i=1;i<n;i++){
            fact *= i;
            num.push_back(i);
        }
         num.push_back(n);
        k--;
        string ans="";
        
        while(1){
            ans += to_string(num[k/fact]);
            num.erase(num.begin()+k/fact);
            k = k%fact;
            if(num.size()==0) break;
            fact/=num.size();
        }
        
        return ans;
    }
};

//Time Complexity: O(N^2)
  We are placing N numbers in N positions. This will take O(N) time. 
  For every number, we are reducing the search space by removing the element already placed in the previous step. 
  This takes another O(N) time (erase() )
  
//Space Complexity: O(N) 
  We are storing the numbers in a data structure(here vector)

