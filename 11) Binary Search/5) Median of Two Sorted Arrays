class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length )
            return findMedianSortedArrays(nums2,nums1);
        
        int len1 = nums1.length, len2 = nums2.length;
        int start = 0, end = len1;
        
        while(start <= end){
            int partitionX = start + (end-start)/2;
            int partitionY = (len1 + len2 + 1)/2 - partitionX;
            
            int leftMinX = (partitionX == 0)?Integer.MIN_VALUE:nums1[partitionX-1];
            int rightMaxX = (partitionX == len1 )?Integer.MAX_VALUE:nums1[partitionX];
            
            int leftMinY =(partitionY == 0)?Integer.MIN_VALUE:nums2[partitionY-1];
            int rightMaxY =(partitionY == len2 )?Integer.MAX_VALUE:nums2[partitionY];
            
            if(leftMinX <= rightMaxY && leftMinY <= rightMaxX){
                if( (len1+len2)%2 ==0 ){
                    return ((double)Math.max(leftMinX,leftMinY)+Math.min(rightMaxX,rightMaxY))/2;
                }
                else{
                    return Math.max(leftMinX,leftMinY);
                }
            }
            else if(leftMinX > rightMaxY){
                end = partitionX - 1;
            }
            else{
                start = partitionX + 1;
            }
        }
        return 0;
    }
}
