//approach 2
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n =nums.size();
        
        vector<int> ans;
        unordered_map<int, int> mp;
        for(int n : nums){
            mp[n]++;
        }
        priority_queue<pair<int,int> > pq;
        
        for(auto m:mp){     
            //will take O(n) to build heap //doubt?
            pq.push({m.second, m.first});
        }
        while(k--){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;   
    }
};
